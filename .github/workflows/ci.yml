name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run reality check nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        pip install ruff mypy black pytest

    - name: Lint with ruff
      run: |
        ruff check penaltyblog/

    - name: Check formatting with black
      run: |
        black --check penaltyblog/ test/ examples/

    - name: Type check with mypy
      run: |
        mypy penaltyblog/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest test/ -v --tb=short

    - name: Test demo pipeline
      run: |
        python -m examples.demo_pipeline

    - name: Test league configuration
      run: |
        python -c "from penaltyblog.config.leagues import load_leagues; leagues = load_leagues(); print(f'Loaded {len(leagues)} leagues'); assert len(leagues) >= 47"

    - name: Test scraper CLI
      run: |
        python -m penaltyblog.scrapers.match_scraper --list-leagues

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy

    - name: Run ruff
      run: ruff check penaltyblog/

    - name: Run black
      run: black --check penaltyblog/ test/ examples/

    - name: Run mypy
      run: mypy penaltyblog/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security check
      run: bandit -r penaltyblog/ -f json || true

    - name: Run safety check
      run: safety check || true

  scraper-integration:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"

    - name: Test scraper with mocked data (Premier League)
      run: |
        # Create a mock data directory and test the scraper functionality
        mkdir -p test_data
        python -c "
        import sys
        sys.path.insert(0, '.')
        from penaltyblog.scrapers.match_scraper import MatchScraper
        from unittest.mock import patch, Mock
        import pandas as pd
        
        # Mock successful scraping
        with patch('requests.Session.get') as mock_get:
            mock_response = Mock()
            mock_response.text = '<html><body><div>No current fixtures</div></body></html>'
            mock_response.raise_for_status.return_value = None
            mock_get.return_value = mock_response
            
            scraper = MatchScraper()
            result = scraper.scrape_league('ENG_PL')
            print(f'Scraper test completed. Result type: {type(result)}')
            print(f'Result columns: {list(result.columns) if hasattr(result, \"columns\") else \"N/A\"}')
            assert isinstance(result, pd.DataFrame)
        "

    - name: Test web interface
      run: |
        python -c "
        from fastapi.testclient import TestClient
        from penaltyblog.web import app
        
        client = TestClient(app)
        response = client.get('/')
        assert response.status_code == 200
        print('Web interface test passed')
        
        response = client.get('/leagues')
        assert response.status_code == 200
        print('Leagues endpoint test passed')
        "

  reality-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-reality-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-reality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"

    - name: Run reality check
      run: |
        make reality-check