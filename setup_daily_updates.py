#!/usr/bin/env python3
"""
Setup Daily Updates Script
==========================

This script sets up automated daily updates for the football schedule.
It creates a cron job that runs daily at 6 AM to update the schedule.
"""

import os
import sys
import subprocess
from pathlib import Path

def get_project_path():
    """Get the absolute path of the project directory."""
    return Path(__file__).parent.absolute()

def create_update_script():
    """Create a wrapper script for the daily update."""
    project_path = get_project_path()
    script_content = f"""#!/bin/bash
# Daily PenaltyBlog Schedule Update
# Auto-generated by setup_daily_updates.py

cd "{project_path}"
{sys.executable} daily_update.py >> /tmp/penaltyblog_update.log 2>&1
"""
    
    script_path = project_path / "run_daily_update.sh"
    script_path.write_text(script_content)
    script_path.chmod(0o755)
    
    print(f"‚úÖ Created update script: {script_path}")
    return script_path

def setup_cron_job(script_path):
    """Set up a cron job to run daily updates."""
    try:
        # Check if cron is available
        subprocess.run(["which", "crontab"], check=True, capture_output=True)
        
        # Get current crontab
        try:
            result = subprocess.run(["crontab", "-l"], capture_output=True, text=True)
            current_cron = result.stdout if result.returncode == 0 else ""
        except subprocess.CalledProcessError:
            current_cron = ""
        
        # Check if our job already exists
        job_line = f"0 6 * * * {script_path}"
        if job_line in current_cron:
            print("‚ö†Ô∏è  Cron job already exists")
            return
        
        # Add our job
        new_cron = current_cron + f"\\n# PenaltyBlog daily schedule update\\n{job_line}\\n"
        
        # Update crontab
        proc = subprocess.Popen(["crontab", "-"], stdin=subprocess.PIPE, text=True)
        proc.communicate(input=new_cron)
        
        if proc.returncode == 0:
            print("‚úÖ Cron job added successfully!")
            print(f"   Schedule will update daily at 6:00 AM")
            print(f"   Log file: /tmp/penaltyblog_update.log")
        else:
            print("‚ùå Failed to add cron job")
            
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Cron not available on this system")
        print("   You can run 'python3 daily_update.py' manually each day")
        return False
    
    return True

def setup_systemd_timer():
    """Alternative: Set up systemd timer for systems without cron."""
    try:
        project_path = get_project_path()
        
        # Create systemd service file
        service_content = f"""[Unit]
Description=PenaltyBlog Daily Schedule Update
After=network.target

[Service]
Type=oneshot
User={os.getenv('USER', 'root')}
WorkingDirectory={project_path}
ExecStart={sys.executable} {project_path}/daily_update.py
StandardOutput=journal
StandardError=journal
"""
        
        # Create systemd timer file
        timer_content = """[Unit]
Description=Run PenaltyBlog update daily
Requires=penaltyblog-update.service

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
"""
        
        print("üìã Systemd service and timer files:")
        print("   Save the following as /etc/systemd/system/penaltyblog-update.service:")
        print("   " + "="*60)
        print(service_content)
        print("   " + "="*60)
        print("\\n   Save the following as /etc/systemd/system/penaltyblog-update.timer:")
        print("   " + "="*60)
        print(timer_content)
        print("   " + "="*60)
        print("\\n   Then run:")
        print("   sudo systemctl enable penaltyblog-update.timer")
        print("   sudo systemctl start penaltyblog-update.timer")
        
    except Exception as e:
        print(f"‚ùå Error creating systemd files: {e}")

def main():
    print("üöÄ Setting up daily schedule updates...")
    
    # Create the update script
    script_path = create_update_script()
    
    # Try to set up cron job
    cron_success = setup_cron_job(script_path)
    
    # If cron failed, show systemd alternative
    if not cron_success:
        print("\\nüìã Alternative: Systemd timer setup")
        setup_systemd_timer()
    
    print("\\n‚úÖ Setup complete!")
    print("\\nüìñ Manual commands:")
    print(f"   Update now: python3 {get_project_path()}/daily_update.py")
    print(f"   View logs: tail -f /tmp/penaltyblog_update.log")
    print(f"   Check cron: crontab -l")

if __name__ == "__main__":
    main()